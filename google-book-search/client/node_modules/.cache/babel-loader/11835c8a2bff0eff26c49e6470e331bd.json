{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:\\\\Users\\\\audij\\\\dev\\\\Google-Book-Search\\\\google-book-search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\audij\\\\dev\\\\Google-Book-Search\\\\google-book-search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\audij\\\\dev\\\\Google-Book-Search\\\\google-book-search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar isIp = require('is-ip');\n\nvar defaults = {\n  timeout: 5000\n};\nvar urls = {\n  v4: ['https://ipv4.icanhazip.com/', 'https://api.ipify.org/'],\n  v6: ['https://ipv6.icanhazip.com/', 'https://api6.ipify.org/']\n};\nvar xhr;\n\nvar sendXhr = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options, version) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              xhr = new XMLHttpRequest();\n              xhr.addEventListener('error', reject, {\n                once: true\n              });\n              xhr.addEventListener('timeout', reject, {\n                once: true\n              });\n              xhr.addEventListener('load', function () {\n                var ip = xhr.responseText.trim();\n\n                if (!ip || !isIp[version](ip)) {\n                  reject();\n                  return;\n                }\n\n                resolve(ip);\n              }, {\n                once: true\n              });\n              xhr.open('GET', url);\n              xhr.timeout = options.timeout;\n              xhr.send();\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sendXhr(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar queryHttps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(version, options) {\n    var ip, urls_, _iterator, _step, url;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            urls_ = [].concat.apply(urls[version], options.fallbackUrls || []);\n            _iterator = _createForOfIteratorHelper(urls_);\n            _context2.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 17;\n              break;\n            }\n\n            url = _step.value;\n            _context2.prev = 6;\n            _context2.next = 9;\n            return sendXhr(url, options, version);\n\n          case 9:\n            ip = _context2.sent;\n            return _context2.abrupt(\"return\", ip);\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](6);\n\n          case 15:\n            _context2.next = 4;\n            break;\n\n          case 17:\n            _context2.next = 22;\n            break;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.t1 = _context2[\"catch\"](2);\n\n            _iterator.e(_context2.t1);\n\n          case 22:\n            _context2.prev = 22;\n\n            _iterator.f();\n\n            return _context2.finish(22);\n\n          case 25:\n            throw new Error('Couldn\\'t find your IP');\n\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 19, 22, 25], [6, 13]]);\n  }));\n\n  return function queryHttps(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nqueryHttps.cancel = function () {\n  xhr.abort();\n};\n\nmodule.exports.v4 = function (options) {\n  return queryHttps('v4', _objectSpread({}, defaults, options));\n};\n\nmodule.exports.v6 = function (options) {\n  return queryHttps('v6', _objectSpread({}, defaults, options));\n};","map":null,"metadata":{},"sourceType":"script"}