{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport isOnline from 'is-online';\nimport root from 'window-or-global';\n\nvar index = function index(_a) {\n  var children = _a.children,\n      skip = _a.skip,\n      config = _a.config;\n\n  var _b = useState(false),\n      loading = _b[0],\n      setLoading = _b[1];\n\n  var _c = useState(null),\n      error = _c[0],\n      setError = _c[1];\n\n  var _d = useState(null),\n      response = _d[0],\n      setResponse = _d[1];\n\n  var _e = useState(null),\n      networkStatus = _e[0],\n      setNetworkStatus = _e[1];\n\n  useEffect(function () {\n    checkNetworkConnection();\n\n    if (!skip) {\n      fetch();\n    }\n  }, []);\n\n  var checkNetworkConnection = function checkNetworkConnection() {\n    if (typeof document != 'undefined' && root && isOnline) {\n      root.addEventListener('offline', function () {\n        isOnline({\n          timeout: 1000\n        }).then(function (online) {\n          if (!online) {\n            setNetworkStatus('offline');\n          }\n        });\n      });\n      root.addEventListener('online', function () {\n        isOnline({\n          timeout: 1000\n        }).then(function (online) {\n          if (online) {\n            setNetworkStatus('online');\n          }\n        });\n      });\n      isOnline({\n        timeout: 1000\n      }).then(function (online) {\n        if (online && networkStatus !== 'online' || !online && networkStatus !== 'offline') {\n          setNetworkStatus(online ? 'online' : 'offline');\n        }\n      });\n    }\n  };\n\n  var fetch = function fetch() {\n    if (config) {\n      setLoading(true);\n      axios(config).then(function (response) {\n        setResponse(response);\n        setLoading(false);\n      }).catch(function (error) {\n        setError(error);\n        setLoading(false);\n      });\n    }\n  }; // @ts-ignore\n\n\n  return children({\n    loading: loading,\n    error: error,\n    response: response,\n    refetch: fetch,\n    networkStatus: networkStatus\n  });\n};\n\nexport default index;","map":null,"metadata":{},"sourceType":"module"}